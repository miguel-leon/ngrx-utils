import { Action } from '../Action';
import { RegisterDispatcher } from '../RegisterDispatcher';
import { computeName } from './computeName';
import { LazyProperty } from '../../util/LazyProperty.decorator';
import { Actions } from './config';


export function AutogeneratedActionType() {
	return <Args extends any[], T>(target: new(...args: Args) => T): new(...args: Args) => T & Action & RegisterDispatcher => {
		Object.defineProperty(target.prototype, 'dispatchedBy', {
			value: Actions.includeDispatcher ?
				function dispatchedBy(this: any, dispatcher: object) {
					Object.defineProperty(this, 'dispatcherName', {
						value: computeName(dispatcher)
					});
					return this;
				} : function dispatchedBy(this: any) {
					return this;
				}
		});

		const propertyDescriptor: PropertyDescriptor = {
			configurable: true,
			get: Actions.includeDispatcher ?
				function type(this: any) {
					return `[${ this.dispatcherName || 'Unknown Dispatcher' }] ${ computeName(this) }`;
				} : function type(this: any) {
					return computeName(this);
				}
		};
		LazyProperty({ valueEnumerable: true })(target.prototype, 'type', propertyDescriptor);
		Object.defineProperty(target.prototype, 'type', propertyDescriptor);

		return target as any;
	}
}
