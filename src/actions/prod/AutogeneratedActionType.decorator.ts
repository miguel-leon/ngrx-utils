import { Action } from '../Action';
import { RegisterDispatcher } from '../RegisterDispatcher';
import { LazyProperty } from '../../util/LazyProperty.decorator';


export function AutogeneratedActionType() {
	return <Args extends any[], T>(target: new(...args: Args) => T): new(...args: Args) => T & Action & RegisterDispatcher => {
		Object.defineProperty(target.prototype, 'dispatchedBy', {
			value: function dispatchedBy() {
				return this;
			}
		});

		const propertyDescriptor: PropertyDescriptor = {
			configurable: true,
			get: function type() {
				return this.constructor.name;
			}
		};
		LazyProperty({ setPrototype: true })(target.prototype, 'type', propertyDescriptor);
		Object.defineProperty(target.prototype, 'type', propertyDescriptor);

		return target as any;
	}
}
